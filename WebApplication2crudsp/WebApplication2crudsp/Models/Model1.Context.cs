//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication2crudsp.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    //// using System.Data.Objects;
    /// using System.Data.Objects.DataClasses;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class naviEntities : DbContext
    {
        public naviEntities()
            : base("name=naviEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<tableone> tableones { get; set; }
    
        public virtual int proceduredelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proceduredelete", idParameter);
        }
    
        public virtual int procedureinsert(string name, string email, string password, Nullable<int> age)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("procedureinsert", nameParameter, emailParameter, passwordParameter, ageParameter);
        }
    
        public virtual ObjectResult<procedureselect_Result> procedureselect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<procedureselect_Result>("procedureselect");
        }
    
        public virtual int procedureupdate(Nullable<int> id, string name, string email, string password, Nullable<int> age)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("procedureupdate", idParameter, nameParameter, emailParameter, passwordParameter, ageParameter);
        }
    
        public virtual ObjectResult<procedurefind_Result> procedurefind(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<procedurefind_Result>("procedurefind", idParameter);
        }
    }
}
